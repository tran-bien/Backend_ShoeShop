const mongoose = require("mongoose");

// KH√îNG T·∫†O SKU TRONG MIDDLEWARE N·ªÆA
// SKU s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi inventory.service.js khi stock in l·∫ßn ƒë·∫ßu
// S·ª≠ d·ª•ng utils/skuGenerator.js cho format chu·∫©n: XXX-XXX-X-XXX-XXXX

/**
 * C·∫≠p nh·∫≠t th√¥ng tin s·ªë l∆∞·ª£ng v√† tr·∫°ng th√°i t·ªìn kho c·ªßa s·∫£n ph·∫©m
 * @param {string} productId - ID c·ªßa s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t
 */
async function updateProductStock(productId) {
  if (!productId) return;

  try {
    const Product = mongoose.model("Product");
    // Import h√†m c·∫≠p nh·∫≠t stock t·ª´ product middlewares
    const { updateProductStockInfo } = require("../product/middlewares");

    const product = await Product.findById(productId);
    if (product) {
      await updateProductStockInfo(product);
    }
  } catch (error) {
    console.error(
      `[variant/middlewares] L·ªói c·∫≠p nh·∫≠t t·ªìn kho: ${error.message}`
    );
  }
}

/**
 * √Åp d·ª•ng middleware cho Variant Schema
 * @param {mongoose.Schema} schema - Schema ƒë·ªÉ √°p d·ª•ng middleware
 */
const applyMiddlewares = (schema) => {
  // Pre-save hook: Variant ch·ªâ l∆∞u th√¥ng tin tham chi·∫øu
  //  KH√îNG C√íN T·ª∞ ƒê·ªòNG T·∫†O SKU ho·∫∑c t√≠nh gi√°
  //  SKU ƒë∆∞·ª£c t·∫°o b·ªüi inventory.service.js khi stock in
  //  Gi√° ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi InventoryItem
  schema.pre("save", async function (next) {
    try {
      // Kh√¥ng l√†m g√¨ c·∫£ - Variant ch·ªâ l√† reference data
      next();
    } catch (error) {
      next(error);
    }
  });

  // Post-save hook: Sau khi l∆∞u, c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m li√™n quan
  schema.post("save", async function () {
    try {
      if (this.product) {
        await updateProductStock(this.product);
      }
    } catch (error) {
      console.error(
        "[POST-SAVE] L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho sau l∆∞u variant:",
        error
      );
    }
  });

  // Pre-findOneAndUpdate hook: Khi s·ª≠ d·ª•ng findOneAndUpdate ƒë·ªÉ c·∫≠p nh·∫≠t document Variant
  schema.pre("findOneAndUpdate", async function (next) {
    try {
      const update = this.getUpdate();
      if (!update) return next();

      // L∆∞u productId ƒë·ªÉ c·∫≠p nh·∫≠t sau khi update
      const doc = await this.model.findOne(this.getQuery());
      if (doc && doc.product) {
        this._productId = doc.product;
      }

      //  KH√îNG C√íN T·ª∞ ƒê·ªòNG T·∫†O SKU ho·∫∑c t√≠nh gi√° trong middleware
      //  SKU ƒë∆∞·ª£c t·∫°o b·ªüi inventory.service.js
      //  Gi√° ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi InventoryItem

      // X·ª≠ l√Ω khi kh√¥i ph·ª•c variant (ƒë·∫∑t deletedAt th√†nh null)
      if (update.$set && update.$set.deletedAt === null) {
        try {
          const doc = await this.model.findOne(this.getQuery(), {
            includeDeleted: true,
          });

          if (doc && doc.sizes && Array.isArray(doc.sizes)) {
            // Ki·ªÉm tra xem c√≥ SKU n√†o b·ªã tr√πng khi kh√¥i ph·ª•c kh√¥ng
            const skus = doc.sizes.map((size) => size.sku).filter(Boolean);

            // T√¨m t·∫•t c·∫£ variant c√≥ SKU tr√πng v·ªõi c√°c SKU c·ªßa variant ƒëang kh√¥i ph·ª•c
            const duplicateSKUs = [];
            for (const sku of skus) {
              if (sku) {
                // T√¨m c√°c SKU tr√πng l·∫∑p trong c√°c variant kh√°c kh√¥ng b·ªã x√≥a
                const duplicateExists = await this.model.findOne({
                  "sizes.sku": sku,
                  _id: { $ne: doc._id },
                  deletedAt: null,
                });

                if (duplicateExists) {
                  duplicateSKUs.push(sku);
                }
              }
            }

            // N·∫øu c√≥ SKU b·ªã tr√πng, x√≥a SKU c≈© (ƒë·ªÉ t·∫°o l·∫°i khi stock in)
            if (duplicateSKUs.length > 0) {
              console.log(
                `‚ö†Ô∏è Ph√°t hi·ªán ${duplicateSKUs.length} SKU tr√πng l·∫∑p khi kh√¥i ph·ª•c variant`
              );

              // L·∫•y sizes hi·ªán t·∫°i
              const updatedSizes = JSON.parse(JSON.stringify(doc.sizes));

              // ‚úÖ X√ìA SKU c≈© (s·∫Ω ƒë∆∞·ª£c t·∫°o l·∫°i b·ªüi inventory.service.js khi stock in)
              updatedSizes.forEach((size, index) => {
                if (size.sku && duplicateSKUs.includes(size.sku)) {
                  updatedSizes[index].sku = null;
                  console.log(`üîÑ ƒê√£ x√≥a SKU tr√πng, s·∫Ω t·∫°o m·ªõi khi stock in`);
                }
              });

              // C·∫≠p nh·∫≠t m·∫£ng sizes v·ªõi c√°c SKU m·ªõi
              if (!update.$set) update.$set = {};
              update.$set.sizes = updatedSizes;
            }
          }

          // ƒê·∫∑t tr·∫°ng th√°i m·∫∑c ƒë·ªãnh khi kh√¥i ph·ª•c l√† inactive
          if (update.$set.isActive === undefined) {
            update.$set.isActive = false;
          }
        } catch (error) {
          console.error(
            "L·ªói khi ki·ªÉm tra SKU tr√πng l·∫∑p khi kh√¥i ph·ª•c variant:",
            error
          );
        }
      }

      next();
    } catch (error) {
      next(error);
    }
  });

  // Post-findOneAndUpdate hook: Sau khi c·∫≠p nh·∫≠t, c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m li√™n quan
  schema.post("findOneAndUpdate", async function (doc) {
    try {
      // S·ª≠ d·ª•ng productId ƒë√£ l∆∞u tr·ªØ ho·∫∑c t·ª´ document c·∫≠p nh·∫≠t
      const productId = this._productId || (doc && doc.product);
      if (productId) {
        await updateProductStock(productId);
        // X√≥a bi·∫øn t·∫°m ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
        delete this._productId;
      }
    } catch (error) {
      console.error(
        "[POST-FINDONEANDUPDATE] L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho sau c·∫≠p nh·∫≠t variant:",
        error
      );
    }
  });

  // Pre-deleteOne/findOneAndDelete hook: Tr∆∞·ªõc khi x√≥a, l∆∞u productId
  schema.pre(/deleteOne|findOneAndDelete/, async function (next) {
    try {
      const doc = await this.model.findOne(this.getQuery());
      if (doc && doc.product) {
        this._productId = doc.product;
      }
      next();
    } catch (error) {
      next(error);
    }
  });

  // Post-deleteOne/findOneAndDelete hook: Sau khi x√≥a, c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m li√™n quan
  schema.post(/deleteOne|findOneAndDelete/, async function () {
    try {
      if (this._productId) {
        await updateProductStock(this._productId);
        delete this._productId;
      }
    } catch (error) {
      console.error(
        "[POST-DELETE] L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho sau x√≥a variant:",
        error
      );
    }
  });

  // Post-updateMany hook: Sau khi c·∫≠p nh·∫≠t nhi·ªÅu variant, c·∫≠p nh·∫≠t c√°c s·∫£n ph·∫©m li√™n quan
  schema.post("updateMany", async function () {
    try {
      const filter = this.getQuery();

      // N·∫øu l√† c·∫≠p nh·∫≠t theo productId c·ª• th·ªÉ
      if (filter.product) {
        await updateProductStock(filter.product);
      }
      // N·∫øu c·∫≠p nh·∫≠t theo nhi·ªÅu variant
      else if (filter._id && filter._id.$in) {
        // L·∫•y danh s√°ch productId t·ª´ c√°c variant b·ªã ·∫£nh h∆∞·ªüng
        const Variant = mongoose.model("Variant");
        const variants = await Variant.find({
          _id: { $in: filter._id.$in },
        }).distinct("product");

        // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c s·∫£n ph·∫©m li√™n quan
        for (const productId of variants) {
          await updateProductStock(productId);
        }
      }
    } catch (error) {
      console.error(
        "[POST-UPDATEMANY] L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho sau updateMany:",
        error
      );
    }
  });

  // Middleware POST-SOFTDELETE v√† POST-RESTORE: C·∫≠p nh·∫≠t stock sau khi x√≥a m·ªÅm ho·∫∑c kh√¥i ph·ª•c
  schema.post("softDelete", async function () {
    try {
      if (this.product) {
        await updateProductStock(this.product);
      }
    } catch (error) {
      console.error("[POST-SOFTDELETE] L·ªói c·∫≠p nh·∫≠t t·ªìn kho:", error);
    }
  });

  schema.post("restore", async function () {
    try {
      if (this.product) {
        await updateProductStock(this.product);
      }
    } catch (error) {
      console.error("[POST-RESTORE] L·ªói c·∫≠p nh·∫≠t t·ªìn kho:", error);
    }
  });
};

module.exports = {
  applyMiddlewares,
  updateProductStock,
  // REMOVED: generateSkuForSize - D√πng utils/skuGenerator.js thay th·∫ø
};
